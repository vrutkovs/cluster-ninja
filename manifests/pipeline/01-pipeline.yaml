apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-pipeline
spec:
  workspaces:
    - name: source
      description: The git repo
  params:
    - name: gitUrl
      description: Git repository url
      type: string
    - name: gitRevision
      description: Git revision to check out
      type: string
      default: main
    - name: build-namespace
      description: Namespace used for image builds
      type: string
      default: build-pipeline
    - name: promote-namespace
      description: Target deploy namespace
      type: string
      default: cluster-ninja
  tasks:
    - name: clone-repo
      taskRef:
        name: git-clone
        kind: ClusterTask
      workspaces:
        - name: output
          workspace: source
      params:
        - name: url
          value: "$(params.gitUrl)"
        - name: revision
          value: "$(params.gitRevision)"
        - name: subdirectory
          value: "src"
        - name: deleteExisting
          value: "true"
    - name: prepare-go-cache
      taskRef:
        name: openshift-client
        kind: ClusterTask
      workspaces:
        - name: manifest-dir
          workspace: source
      runAfter:
        - clone-repo
      params:
      - name: VERSION
        value: latest
      - name: SCRIPT
        value: |
          mkdir -p /workspace/manifest-dir/go
    - name: build-backend
      taskRef:
        name: buildah
        kind: ClusterTask
      runAfter:
        - prepare-go-cache
      params:
        - name: IMAGE
          value: 'image-registry.openshift-image-registry.svc:5000/$(params.build-namespace)/cluster-ninja:backend'
        - name: TLSVERIFY
          value: 'false'
        - name: DOCKERFILE
          value: src/Dockerfile.backend
        - name: CONTEXT
          value: src
        - name: BUILD_EXTRA_ARGS
          value: "-v $(pwd)/go:/go/pkg/mod:Z"
      workspaces:
        - name: source
          workspace: source
    - name: build-frontend
      taskRef:
        name: buildah
        kind: ClusterTask
      runAfter:
        - clone-repo
      params:
        - name: IMAGE
          value: 'image-registry.openshift-image-registry.svc:5000/$(params.build-namespace)/cluster-ninja:frontend'
        - name: TLSVERIFY
          value: 'false'
        - name: DOCKERFILE
          value: src/Dockerfile.frontend
        - name: CONTEXT
          value: src
      workspaces:
        - name: source
          workspace: source
    - name: promote-builds
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
      - name: VERSION
        value: latest
      - name: SCRIPT
        value: |
          oc -n $(params.promote-namespace) tag $(params.build-namespace)/cluster-ninja:backend $(params.promote-namespace)/cluster-ninja:backend && \
          oc -n $(params.promote-namespace) tag $(params.build-namespace)/cluster-ninja:frontend $(params.promote-namespace)/cluster-ninja:frontend
      runAfter:
      - build-backend
      - build-frontend
    - name: wait-for-backend-rollout
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
      - name: VERSION
        value: latest
      - name: SCRIPT
        value: |
          oc -n $(params.promote-namespace) wait --for=condition=available --timeout=60s deployment/frontend
      runAfter:
      - promote-builds
    - name: wait-for-frontend-rollout
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
      - name: VERSION
        value: latest
      - name: SCRIPT
        value: |
          oc -n $(params.promote-namespace) wait --for=condition=available --timeout=60s deployment/frontend
      runAfter:
      - promote-builds
